apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    signingConfigs {
        release {
            storeFile
            storePassword
            keyAlias
            keyPassword
        }
    }


    defaultConfig {
        multiDexEnabled true
        applicationId "com.fala.emba.team"
        minSdkVersion 20
        targetSdkVersion 26
        versionCode 10000
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            debuggable false
            //启用代码混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources false
            //签名相关
            signingConfig signingConfigs.release
            //混淆规则配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
        debug {
            debuggable true
            minifyEnabled false
            //multiDexEnabled true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}


//读取配置文件获取签名
File propFile = file('../emba_team_signing.properties')
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}



//定制打包apk时的命名
android.applicationVariants.all { variant ->
    variant.outputs.all {
        def date = new Date()
        def formattedDate = date.format('yyyy-MM-dd-HH-mm-ss')
        if (!variant.buildType.debuggable) {  //release
            outputFileName = "emba_team_${android.defaultConfig.versionName}_${formattedDate}_${variant.name}.apk"
        }else{
            outputFileName = "emba_team_${android.defaultConfig.versionName}_${variant.name}.apk"  //debug
        }
    }
}

dependencies {
    //noinspection GradleCompatible
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    compile 'com.yanzhenjie:permission:1.1.2'
    compile 'com.android.support:design:26.1.0'
    testCompile 'junit:junit:4.12'
    compile project(':LibCircleImageView')
    compile project(':LibOkhttp')
    compile project(':LibPopup')
    compile project(':LibPickerView')
    compile project(':LibViewPagerIndicator')
//    implementation project(':LibSearchView')
    compile project(':LibSmartRefreshHeader')
    compile project(':LibSmartRefreshLayout')
    compile files('libs/commons-codec-1.3.jar')
    compile files('libs/gson-2.2.1.jar')
    compile files('libs/universal-image-loader-1.9.5.jar')
    compile files('libs/jcore-android-1.1.8.jar')
    compile files('libs/jpush-android-3.1.0.jar')
}
