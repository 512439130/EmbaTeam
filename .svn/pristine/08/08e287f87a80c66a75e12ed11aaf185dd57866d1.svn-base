package com.fala.emba.team.base.activity;


import android.annotation.TargetApi;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.graphics.Color;
import android.os.Build;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.TextView;

import com.fala.emba.team.R;
import com.fala.emba.team.app.AppManager;
import com.fala.emba.team.util.AndroidWorkaround;
import com.yy.http.okhttp.OkHttpUtils;


/**
 * 所有Activity的基类
 * Created by SoMustYY on 2017/7/4.
 */
public abstract class BaseActivity extends AppCompatActivity {
    private static final String TAG = "BaseActivity";


    private ImageView ivReturn;
    private TextView tvTitle;
    private TextView tvTitleRight;


    @TargetApi(Build.VERSION_CODES.KITKAT)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        isShowStatus(isShowStatus());

        setScreenDirection(false); // 强制横屏

        setContentView(getLayoutId());  //填充布局
        inits();

        setTranslucentStatus();

        ivReturn = findView(R.id.iv_return);
        tvTitle = findView(R.id.tv_title);
        tvTitleRight = findView(R.id.tv_title_right);


        if (isShowBacking() && ivReturn != null) {
            showBack();
        }
        if (isShowTitleText() && tvTitle != null && getTitleText() != null) {
            //getTitle()的值是activity的android:lable属性值
            tvTitle.setVisibility(View.VISIBLE);
            tvTitle.setText(getTitleText());
        }

        if (isShowTvRight() && tvTitleRight != null) {
            //getTitle()的值是activity的android:lable属性值
            tvTitleRight.setVisibility(View.VISIBLE);
        }


        //华为机底部虚拟键适配
        if (AndroidWorkaround.checkDeviceHasNavigationBar(this)) {
            AndroidWorkaround.assistActivity(findViewById(android.R.id.content));
        }
        AppManager.getAppManager().addActivity(this);
    }

    protected void isShowStatus(boolean isShow) {
        if (isShow) {
            supportRequestWindowFeature(Window.FEATURE_NO_TITLE);//继承AppCompatActivity使用
        } else {
            this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);//去掉信息栏
            supportRequestWindowFeature(Window.FEATURE_NO_TITLE);//继承AppCompatActivity使用 去掉顶部状态栏
        }


    }


    /**
     * 设置状态栏透明(沉浸式效果)
     */
    private void setTranslucentStatus() {
        // 5.0以上系统状态栏透明
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            Window window = getWindow();
            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
            window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
            //需要设置这个 flag 才能调用 setStatusBarColor 来设置状态栏颜色
            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
            //设置状态栏颜色
            window.setStatusBarColor(Color.TRANSPARENT);
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
        }
    }

    /**
     * 设置横屏模式
     */
    protected void setScreenDirection(boolean type) {
        if (type) {  //horizontal
            horizontalDirection();
        } else {//vertical
            verticalDirection();
        }
    }

    /**
     * 强制竖屏
     */
    private void verticalDirection() {
        if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        }
    }

    /**
     * 强制横屏
     */
    private void horizontalDirection() {
        if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        }
    }


    /**
     * 省去强转findviewById
     *
     * @param id
     * @param <T>
     * @return
     */
    protected <T extends View> T findView(int id) {
        return (T) findViewById(id);
    }

    @Override
    protected void onStart() {
        super.onStart();


    }



    /**
     * 版本号小于21的后退按钮图片
     */
    private void showBack() {
        ivReturn.setVisibility(View.VISIBLE);
        ivReturn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
            }
        });
    }


    /**
     * 是否显示后退按钮,默认显示,可在子类重写该方法.
     *
     * @return
     */
    protected boolean isShowBacking() {
        return true;
    }

    /**
     * 是否中间文字
     *
     * @return
     */
    protected boolean isShowTitleText() {
        return true;
    }


    /**
     * 是否右边text
     *
     * @return
     */
    protected boolean isShowTvRight() {
        return true;
    }

    /**
     * 设置标题
     *
     * @return
     */
    protected abstract String getTitleText();

    /**
     * 是否隐藏状态栏
     */
    protected abstract boolean isShowStatus();

    /**
     * this activity layout res
     * 设置layout布局,在子类重写该方法.
     *
     * @return res layout xml id
     */
    protected abstract int getLayoutId();

    /**
     * 初始化
     */
    protected abstract void inits();


    @Override
    protected void onDestroy() {
        super.onDestroy();
//        AppManager.getAppManager().finishActivity(this);
//        ToastManager.cancel();
        OkHttpUtils.getInstance().cancelTag(this);
    }


    /**工具方法**/


    /**
     * 跳转一个Activity
     *
     * @param pClass
     */
    protected void openActivity(Class<?> pClass) {
        Intent intent = new Intent();
        intent.setClass(this, pClass);
        startActivity(intent);
    }

    /**
     * 跳转一个新Activity，在新Activity关闭后返回数据
     *
     * @param pClass
     * @param requestCode
     */
    protected void openActivityForResult(Class<?> pClass, int requestCode) {
        Intent intent = new Intent();
        intent.setClass(this, pClass);
        startActivityForResult(intent, requestCode);
    }

    /**
     * 跳转一个新Activity,并携带数据
     *
     * @param pClass
     * @param bundle
     */
    protected void showActivity(Class<?> pClass, Bundle bundle) {
        // TODO Auto-generated method stub
        Intent intent = new Intent(this, pClass);
        intent.setClass(this, pClass);
        intent.putExtras(bundle);
        startActivity(intent);
    }

    /**
     * 跳转到指定Activity并且finish前者Activity
     *
     * @param pClass 类class
     */
    protected void openActivityFinish(Class<?> pClass) {
        Intent intent = new Intent();
        intent.setClass(this, pClass);
        startActivity(intent);
        this.finish();
    }

    /**
     * 获取一个当前context的布局填充器
     *
     * @return
     */
    protected LayoutInflater getLayouInflater() {
        LayoutInflater layoutInflater = LayoutInflater.from(this);
        return layoutInflater;
    }


}
