package com.fala.emba.team.util;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.StringTokenizer;

public class DateUtil {

    private static final String TAG = "DateUtil";

    private static final String FORMAT1 = "yyyy-MM-dd HH:mm:ss";
    private static final String FORMAT2 = "yyyyMMddHHmmss";
    private static SimpleDateFormat sdfNormal;
    private static SimpleDateFormat sdfStr;

    static {
        sdfNormal = new SimpleDateFormat(FORMAT1);
        sdfStr = new SimpleDateFormat(FORMAT2);
    }

    public static String formatDate(String date) {
        String format = null;
        try {
            if (date == null || "".equals(date)) {
                return "";
            }
            format = sdfNormal.format(sdfNormal.parse(date));
        } catch (ParseException e) {
            LogManager.e(TAG, "formatDate", e);
            return date;
        }
        return format;
    }

    /**
     * get current date,date pattern  : yyyy-MM-dd HH:mm:ss
     * 获取系统当前时间
     *
     * @return
     */
    public static String getCurrentDate() {
        String format = null;
        format = sdfNormal.format(new Date());
        return format;
    }

    public static String formatDateStr(String date) {
        String format = null;
        try {
            Date parseDate = sdfStr.parse(date);
            format = sdfNormal.format(parseDate);
        } catch (ParseException e) {
            LogManager.e(TAG, "formatDateStr", e);
            return date;
        }
        return format;
    }

    /**
     * 获取当前时间的字符串
     */
    public static String getCurrentDateStr() {
        Date date = new Date();
        Calendar c = Calendar.getInstance();
        c.setTime(date);
        String[] weekDays = {"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"};
        int w = c.get(Calendar.DAY_OF_WEEK) - 1;
        if (w < 0) {
            w = 0;
        }
        String mDate = c.get(Calendar.YEAR) + "年" + (c.get(Calendar.MONTH) + 1)
                + "月" + c.get(Calendar.DATE) + "日  " + weekDays[w];
        return mDate;
    }

    /**
     * 两个string类型的日期比较大小
     *
     * @param date1
     * @param date2
     * @return
     */
    public static int compare_date(String date1, String date2) {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try {
            Date dt1 = df.parse(date1);
            Date dt2 = df.parse(date2);
            if (dt1.getTime() > dt2.getTime()) {
                System.out.println("date1 在 date2 前");
                return 1;
            } else if (dt1.getTime() < dt2.getTime()) {
                System.out.println("date1 在 date2 后");
                return -1;
            } else {
                return 0;
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return 0;
    }

    /**
     * 返回两个string类型日期之间相差的天数
     *
     * @param smdate
     * @param bdate
     * @return
     */
    public static int daysBetween(String smdate, String bdate) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        long time1 = 0;
        long time2 = 0;

        try {
            cal.setTime(sdf.parse(smdate));
            time1 = cal.getTimeInMillis();
            cal.setTime(sdf.parse(bdate));
            time2 = cal.getTimeInMillis();
        } catch (Exception e) {
            e.printStackTrace();
        }
        long between_days = (time2 - time1) / (1000 * 60 * 60 * 24);

        return Integer.parseInt(String.valueOf(between_days));
    }

    /**
     * 返回两个string类型日期相差的小时数
     *
     * @param startTime
     * @param endTime
     * @return
     */
    public static int hoursBetween(String startTime, String endTime) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH");
        Calendar cal = Calendar.getInstance();
        long time1 = 0;
        long time2 = 0;

        try {
            cal.setTime(sdf.parse(startTime));
            time1 = cal.getTimeInMillis();
            cal.setTime(sdf.parse(endTime));
            time2 = cal.getTimeInMillis();
        } catch (Exception e) {
            e.printStackTrace();
        }
        long between_hours = (time2 - time1) / (1000 * 60 * 60);

        return Integer.parseInt(String.valueOf(between_hours));
    }


    /**
     * 返回两个string类型日期相差的分钟数
     *
     * @param startTime
     * @param endTime
     * @return
     */
    public static int minuteBetween(String startTime, String endTime) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        Calendar cal = Calendar.getInstance();
        long time1 = 0;
        long time2 = 0;

        try {
            cal.setTime(sdf.parse(startTime));
            time1 = cal.getTimeInMillis();
            cal.setTime(sdf.parse(endTime));
            time2 = cal.getTimeInMillis();
        } catch (Exception e) {
            e.printStackTrace();
        }
        long between_minutes = (time2 - time1) / (1000 * 60);

        return Integer.parseInt(String.valueOf(between_minutes));
    }


    /**
     * 时间就近取整:<=30分向前取整,>30分向后取整
     * Author:zr
     *
     * @param time inTime 07:56
     * @return outTime 08:00
     */

    public static String getInitialTime(String time) {
        String hour = "00";//小时
        String minutes = "00";//分钟
        String outTime = "00:00";
        StringTokenizer st = new StringTokenizer(time, ":");
        List<String> inTime = new ArrayList<String>();
        while (st.hasMoreElements()) {
            inTime.add(st.nextToken());
        }
        hour = inTime.get(0).toString();
        minutes = inTime.get(1).toString();
        if (Integer.parseInt(minutes) > 30) {
            hour = (Integer.parseInt(hour) + 1) + "";
        }
        outTime = hour + ":00";
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");

        try {
            outTime = sdf.format(sdf.parse(outTime));
        } catch (ParseException e) {
// TODO Auto-generated catch block
            e.printStackTrace();
        }
        return outTime;
    }
}
